/**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 9.4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import Integration from './Integration';
import LineAllOf from './LineAllOf';
import Status from './Status';

/**
 * The Line model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Line
 * @version 9.4.0
 */
class Line {
    /**
     * Constructs a new <code>Line</code>.
     * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Line
     * @extends module:sunshine-conversations-client/sunshine-conversations-client.model/Integration
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/Integration
     * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/LineAllOf
     * @param type {String} The type of integration.
     * @param channelId {String} LINE Channel ID.
     * @param channelSecret {String} LINE Channel Secret.
     */
    constructor(type, channelId, channelSecret) { 
        Integration.initialize(this, type);LineAllOf.initialize(this, channelId, channelSecret);
        Line.initialize(this, type, channelId, channelSecret);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, channelId, channelSecret) { 
        obj['channelId'] = channelId;
        obj['channelSecret'] = channelSecret;
    }

    /**
     * Constructs a <code>Line</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Line} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Line} The populated <code>Line</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Line();
            Integration.constructFromObject(data, obj);
            Integration.constructFromObject(data, obj);
            LineAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('channelId')) {
                obj['channelId'] = ApiClient.convertToType(data['channelId'], 'String');
            }
            if (data.hasOwnProperty('channelSecret')) {
                obj['channelSecret'] = ApiClient.convertToType(data['channelSecret'], 'String');
            }
            if (data.hasOwnProperty('channelAccessToken')) {
                obj['channelAccessToken'] = ApiClient.convertToType(data['channelAccessToken'], 'String');
            }
            if (data.hasOwnProperty('serviceCode')) {
                obj['serviceCode'] = ApiClient.convertToType(data['serviceCode'], 'String');
            }
            if (data.hasOwnProperty('switcherSecret')) {
                obj['switcherSecret'] = ApiClient.convertToType(data['switcherSecret'], 'String');
            }
            if (data.hasOwnProperty('qrCodeUrl')) {
                obj['qrCodeUrl'] = ApiClient.convertToType(data['qrCodeUrl'], 'String');
            }
            if (data.hasOwnProperty('lineId')) {
                obj['lineId'] = ApiClient.convertToType(data['lineId'], 'String');
            }
        }
        return obj;
    }

/**
     * Returns The type of integration.
     * @return {String}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The type of integration.
     * @param {String} type The type of integration.
     */
    setType(type) {
        this['type'] = type;
    }
/**
     * Returns LINE Channel ID.
     * @return {String}
     */
    getChannelId() {
        return this.channelId;
    }

    /**
     * Sets LINE Channel ID.
     * @param {String} channelId LINE Channel ID.
     */
    setChannelId(channelId) {
        this['channelId'] = channelId;
    }
/**
     * Returns LINE Channel Secret.
     * @return {String}
     */
    getChannelSecret() {
        return this.channelSecret;
    }

    /**
     * Sets LINE Channel Secret.
     * @param {String} channelSecret LINE Channel Secret.
     */
    setChannelSecret(channelSecret) {
        this['channelSecret'] = channelSecret;
    }
/**
     * Returns LINE Channel Access Token.
     * @return {String}
     */
    getChannelAccessToken() {
        return this.channelAccessToken;
    }

    /**
     * Sets LINE Channel Access Token.
     * @param {String} channelAccessToken LINE Channel Access Token.
     */
    setChannelAccessToken(channelAccessToken) {
        this['channelAccessToken'] = channelAccessToken;
    }
/**
     * Returns LINE Service Code.
     * @return {String}
     */
    getServiceCode() {
        return this.serviceCode;
    }

    /**
     * Sets LINE Service Code.
     * @param {String} serviceCode LINE Service Code.
     */
    setServiceCode(serviceCode) {
        this['serviceCode'] = serviceCode;
    }
/**
     * Returns LINE Switcher Secret.
     * @return {String}
     */
    getSwitcherSecret() {
        return this.switcherSecret;
    }

    /**
     * Sets LINE Switcher Secret.
     * @param {String} switcherSecret LINE Switcher Secret.
     */
    setSwitcherSecret(switcherSecret) {
        this['switcherSecret'] = switcherSecret;
    }
/**
     * Returns URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
     * @return {String}
     */
    getQrCodeUrl() {
        return this.qrCodeUrl;
    }

    /**
     * Sets URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
     * @param {String} qrCodeUrl URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
     */
    setQrCodeUrl(qrCodeUrl) {
        this['qrCodeUrl'] = qrCodeUrl;
    }
/**
     * Returns LINE Basic ID. Is automatically set when qrCodeUrl is updated.
     * @return {String}
     */
    getLineId() {
        return this.lineId;
    }

    /**
     * Sets LINE Basic ID. Is automatically set when qrCodeUrl is updated.
     * @param {String} lineId LINE Basic ID. Is automatically set when qrCodeUrl is updated.
     */
    setLineId(lineId) {
        this['lineId'] = lineId;
    }

}

/**
 * The type of integration.
 * @member {String} type
 * @default 'line'
 */
Line.prototype['type'] = 'line';

/**
 * LINE Channel ID.
 * @member {String} channelId
 */
Line.prototype['channelId'] = undefined;

/**
 * LINE Channel Secret.
 * @member {String} channelSecret
 */
Line.prototype['channelSecret'] = undefined;

/**
 * LINE Channel Access Token.
 * @member {String} channelAccessToken
 */
Line.prototype['channelAccessToken'] = undefined;

/**
 * LINE Service Code.
 * @member {String} serviceCode
 */
Line.prototype['serviceCode'] = undefined;

/**
 * LINE Switcher Secret.
 * @member {String} switcherSecret
 */
Line.prototype['switcherSecret'] = undefined;

/**
 * URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
 * @member {String} qrCodeUrl
 */
Line.prototype['qrCodeUrl'] = undefined;

/**
 * LINE Basic ID. Is automatically set when qrCodeUrl is updated.
 * @member {String} lineId
 */
Line.prototype['lineId'] = undefined;


// Implement Integration interface:
/**
 * The unique ID of the integration.
 * @member {String} id
 */
Integration.prototype['id'] = undefined;
/**
 * The type of integration.
 * @member {String} type
 */
Integration.prototype['type'] = undefined;
/**
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Status} status
 */
Integration.prototype['status'] = undefined;
/**
 * A human-friendly name used to identify the integration.
 * @member {String} displayName
 */
Integration.prototype['displayName'] = undefined;
// Implement LineAllOf interface:
/**
 * The type of integration.
 * @member {String} type
 * @default 'line'
 */
LineAllOf.prototype['type'] = 'line';
/**
 * LINE Channel ID.
 * @member {String} channelId
 */
LineAllOf.prototype['channelId'] = undefined;
/**
 * LINE Channel Secret.
 * @member {String} channelSecret
 */
LineAllOf.prototype['channelSecret'] = undefined;
/**
 * LINE Channel Access Token.
 * @member {String} channelAccessToken
 */
LineAllOf.prototype['channelAccessToken'] = undefined;
/**
 * LINE Service Code.
 * @member {String} serviceCode
 */
LineAllOf.prototype['serviceCode'] = undefined;
/**
 * LINE Switcher Secret.
 * @member {String} switcherSecret
 */
LineAllOf.prototype['switcherSecret'] = undefined;
/**
 * URL provided by LINE in the [Developer Console](https://developers.line.biz/console/).
 * @member {String} qrCodeUrl
 */
LineAllOf.prototype['qrCodeUrl'] = undefined;
/**
 * LINE Basic ID. Is automatically set when qrCodeUrl is updated.
 * @member {String} lineId
 */
LineAllOf.prototype['lineId'] = undefined;




export default Line;

