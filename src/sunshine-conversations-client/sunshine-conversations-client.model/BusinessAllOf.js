/**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The BusinessAllOf model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf
 * @version 12.3.0
 */
class BusinessAllOf {
    /**
     * Constructs a new <code>BusinessAllOf</code>.
     * The message author.
     * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf
     */
    constructor() { 
        
        BusinessAllOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BusinessAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf} The populated <code>BusinessAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BusinessAllOf();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('subtypes')) {
                obj['subtypes'] = ApiClient.convertToType(data['subtypes'], ['String']);
            }
        }
        return obj;
    }

/**
     * Returns The author type.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf.TypeEnum}
     */
    getType() {
        return this.type;
    }

    /**
     * Sets The author type.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf.TypeEnum} type The author type.
     */
    setType(type) {
        this['type'] = type;
    }
/**
     * Returns A string array that indicates the author's subtypes. Messages with an \"AI\" subtype are generated by AI  and a disclaimer is appended to the text of the message sent to the customer. For third-party channels,  the disclaimer is applied for image, file, and text message types. 
     * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf.SubtypesEnum>}
     */
    getSubtypes() {
        return this.subtypes;
    }

    /**
     * Sets A string array that indicates the author's subtypes. Messages with an \"AI\" subtype are generated by AI  and a disclaimer is appended to the text of the message sent to the customer. For third-party channels,  the disclaimer is applied for image, file, and text message types. 
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf.SubtypesEnum>} subtypes A string array that indicates the author's subtypes. Messages with an \"AI\" subtype are generated by AI  and a disclaimer is appended to the text of the message sent to the customer. For third-party channels,  the disclaimer is applied for image, file, and text message types. 
     */
    setSubtypes(subtypes) {
        this['subtypes'] = subtypes;
    }

}

/**
 * The author type.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf.TypeEnum} type
 */
BusinessAllOf.prototype['type'] = undefined;

/**
 * A string array that indicates the author's subtypes. Messages with an \"AI\" subtype are generated by AI  and a disclaimer is appended to the text of the message sent to the customer. For third-party channels,  the disclaimer is applied for image, file, and text message types. 
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/BusinessAllOf.SubtypesEnum>} subtypes
 */
BusinessAllOf.prototype['subtypes'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BusinessAllOf['TypeEnum'] = {

    /**
     * value: "business"
     * @const
     */
    "business": "business"
};


/**
 * Allowed values for the <code>subtypes</code> property.
 * @enum {String}
 * @readonly
 */
BusinessAllOf['SubtypesEnum'] = {

    /**
     * value: "AI"
     * @const
     */
    "AI": "AI"
};



export default BusinessAllOf;

